{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase-utils';\nimport Types from './user-types';\nimport { signInSuccess, signInFailure } from './user-actions';\n\nfunction* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n;\n\nfunction* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n;\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(Types.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\n;\n\nfunction* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\n;\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(Types.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\n;\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield call(getCurrentUser());\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onCheckUserSession() {\n  yield takeLatest(Types.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\nexport default function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated)]);\n}\n;","map":{"version":3,"sources":["/Users/TGAP/Desktop/crown-clothing/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","Types","signInSuccess","signInFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,QAAyC,oBAAzC;AACA,SAAQC,IAAR,EAAcC,cAAd,EAA8BC,yBAA9B,EAAyDC,cAAzD,QAA8E,+BAA9E;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,SAAQC,aAAR,EAAuBC,aAAvB,QAA2C,gBAA3C;;AAGA,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAC1C,MAAI;AACF,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACG,yBAAD,EAA4BM,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACQ,aAAa,CACrB;AAACO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KADqB,CAAd,CAAT;AAGD,GAND,CAME,OAAMC,KAAN,EAAa;AACb,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACD;AACF;;AAAA;;AAGD,UAAUC,gBAAV,GAA6B;AAC3B,MAAI;AACF,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMhB,IAAI,CAACiB,eAAL,CAAqBhB,cAArB,CAArB;AACA,UAAMM,uBAAuB,CAACS,IAAD,CAA7B;AACD,GAHD,CAGE,OAAMF,KAAN,EAAa;AACb,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACD;AACF;;AAAA;;AAED,UAAUI,mBAAV,GAAgC;AAC9B,QAAMtB,UAAU,CAACQ,KAAK,CAACe,oBAAP,EAA6BJ,gBAA7B,CAAhB;AACD;;AAAA;;AAGD,UAAUK,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA1B,EAAwD;AACtD,MAAI;AACF,UAAM;AAACP,MAAAA;AAAD,QAAS,MAAMhB,IAAI,CAACwB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAArB;AACA,UAAMhB,uBAAuB,CAACS,IAAD,CAA7B;AACD,GAHD,CAGE,OAAMF,KAAN,EAAa;AACb,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACD;AACF;;AAAA;;AAED,UAAUW,kBAAV,GAA+B;AAC7B,QAAM7B,UAAU,CAACQ,KAAK,CAACsB,mBAAP,EAA4BN,eAA5B,CAAhB;AACD;;AAAA;;AAID,UAAUO,mBAAV,GAAgC;AAC9B,MAAI;AACF,UAAMnB,QAAQ,GAAG,MAAMT,IAAI,CAACI,cAAc,EAAf,CAA3B;AACA,QAAI,CAACK,QAAL,EAAe;AACf,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACD,GAJD,CAIE,OAAMM,KAAN,EAAa;AACb,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACD;AACF;;AAED,UAAUc,kBAAV,GAA+B;AAC7B,QAAMhC,UAAU,CAACQ,KAAK,CAACyB,kBAAP,EAA2BF,mBAA3B,CAAhB;AACD;;AAGD,eAAe,UAAUG,SAAV,GAAsB;AACnC,QAAMhC,GAAG,CAAC,CACRC,IAAI,CAACmB,mBAAD,CADI,EAERnB,IAAI,CAAC0B,kBAAD,CAFI,EAGR1B,IAAI,CAAC4B,mBAAD,CAHI,CAAD,CAAT;AAKD;AAAA","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects';\nimport {auth, googleProvider, createUserProfileDocument, getCurrentUser} from '../../firebase/firebase-utils';\nimport Types from './user-types';\nimport {signInSuccess, signInFailure} from './user-actions';\n\n\nfunction* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(\n      {id: userSnapshot.id, ...userSnapshot.data()}\n    ));\n  } catch(error) {\n    yield put(signInFailure(error));\n  }\n};\n\n\nfunction* signInWithGoogle() {\n  try {\n    const {user} = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch(error) {\n    yield put(signInFailure(error)); \n  }\n};\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(Types.GOOGLE_SIGN_IN_START, signInWithGoogle)\n};\n\n\nfunction* signInWithEmail({payload: {email, password}}) {\n  try {\n    const {user} = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch(error) {\n    yield put(signInFailure(error)); \n  }\n};\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(Types.EMAIL_SIGN_IN_START, signInWithEmail)\n};\n\n\n\nfunction* isUserAuthenticated() {\n  try {\n    const userAuth = yield call(getCurrentUser());\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch(error) {\n    yield put(signInFailure(error));\n  }\n}\n\nfunction* onCheckUserSession() {\n  yield takeLatest(Types.CHECK_USER_SESSION, isUserAuthenticated);\n}\n\n\nexport default function* userSagas() {\n  yield all([\n    call(onGoogleSignInStart),\n    call(onEmailSignInStart),\n    call(isUserAuthenticated)\n  ]);\n};"]},"metadata":{},"sourceType":"module"}