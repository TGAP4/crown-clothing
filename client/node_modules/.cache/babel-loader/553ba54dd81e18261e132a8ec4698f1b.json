{"ast":null,"code":"var _jsxFileName = \"/Users/TGAP/Desktop/crown-clothing/client/src/pages/collection/collection.jsx\";\nimport React, { useEffect } from 'react';\nimport * as S from './collection-styles';\nimport { connect } from 'react-redux';\nimport { selectCollection } from '../../redux/shop/shop-selectors';\nimport { selectIsCollectionFetching } from '../../redux/shop/shop-selectors';\nimport { fetchCollectionsStart } from '../../redux/shop/shop-actions';\nimport CollectionItem from '../../components/collection-item/collection-item';\nimport LoadingSpinner from '../../components/loading-spinner/loading-spinner';\n\nconst Collection = ({\n  isLoading,\n  fetchCollectionsStart,\n  collection\n}) => {\n  useEffect(() => {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]);\n  const {\n    title,\n    items\n  } = collection;\n\n  if (isLoading) {\n    console.log('LOADING');\n    return /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 12\n      }\n    });\n  } else return /*#__PURE__*/React.createElement(S.Collection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(S.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, title.toUpperCase()), /*#__PURE__*/React.createElement(S.Items, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, items.map(item => /*#__PURE__*/React.createElement(CollectionItem, {\n    key: item.id,\n    item: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  collection: selectCollection(ownProps.match.params.collectionId)(state),\n  isLoading: selectIsCollectionFetching(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Collection);","map":{"version":3,"sources":["/Users/TGAP/Desktop/crown-clothing/client/src/pages/collection/collection.jsx"],"names":["React","useEffect","S","connect","selectCollection","selectIsCollectionFetching","fetchCollectionsStart","CollectionItem","LoadingSpinner","Collection","isLoading","collection","title","items","console","log","toUpperCase","map","item","id","mapStateToProps","state","ownProps","match","params","collectionId","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,KAAKC,CAAZ,MAAmB,qBAAnB;AAEA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,gBAAR,QAA+B,iCAA/B;AACA,SAASC,0BAAT,QAA2C,iCAA3C;AACA,SAASC,qBAAT,QAAsC,+BAAtC;AAEA,OAAOC,cAAP,MAA2B,kDAA3B;AACA,OAAOC,cAAP,MAA2B,kDAA3B;;AAGA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYJ,EAAAA,qBAAZ;AAAmCK,EAAAA;AAAnC,CAAD,KAAoD;AACrEV,EAAAA,SAAS,CAAC,MAAM;AAAEK,IAAAA,qBAAqB;AAAK,GAAnC,EAAqC,CAACA,qBAAD,CAArC,CAAT;AACA,QAAM;AAACM,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAiBF,UAAvB;;AACA,MAAID,SAAJ,EAAe;AACXI,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACF,wBAAO,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAA2B,GAF7B,MAGO,oBAAO,oBAAC,CAAD,CAAG,UAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACV,oBAAC,CAAD,CAAG,KAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUH,KAAK,CAACI,WAAN,EAAV,CADU,eAER,oBAAC,CAAD,CAAG,KAAH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACI,GAAN,CAAUC,IAAI,iBACf,oBAAC,cAAD;AAAgB,IAAA,GAAG,EAAEA,IAAI,CAACC,EAA1B;AAA8B,IAAA,IAAI,EAAED,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,CADH,CAFQ,CAAP;AAQR,CAdD;;AAgBA,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,MAAsB;AAC5CX,EAAAA,UAAU,EAAEP,gBAAgB,CAACkB,QAAQ,CAACC,KAAT,CAAeC,MAAf,CAAsBC,YAAvB,CAAhB,CAAqDJ,KAArD,CADgC;AAE5CX,EAAAA,SAAS,EAAEL,0BAA0B,CAACgB,KAAD;AAFO,CAAtB,CAAxB;;AAKA,MAAMK,kBAAkB,GAAGC,QAAQ,KAAK;AACtCrB,EAAAA,qBAAqB,EAAE,MAAMqB,QAAQ,CAACrB,qBAAqB,EAAtB;AADC,CAAL,CAAnC;;AAIA,eAAeH,OAAO,CAACiB,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CjB,UAA7C,CAAf","sourcesContent":["import React, {useEffect} from 'react';\nimport * as S from './collection-styles';\n\nimport {connect} from 'react-redux';\nimport {selectCollection} from '../../redux/shop/shop-selectors';\nimport { selectIsCollectionFetching } from '../../redux/shop/shop-selectors';\nimport { fetchCollectionsStart } from '../../redux/shop/shop-actions';\n\nimport CollectionItem from '../../components/collection-item/collection-item';\nimport LoadingSpinner from '../../components/loading-spinner/loading-spinner';\n\n\nconst Collection = ({isLoading, fetchCollectionsStart, collection}) => {\n  useEffect(() => { fetchCollectionsStart(); }, [fetchCollectionsStart]);\n  const {title, items} = collection;\n  if (isLoading) {\n      console.log('LOADING');\n    return <LoadingSpinner /> }\n    else return <S.Collection>\n      <S.Title>{title.toUpperCase()}</S.Title>\n        <S.Items>\n          {items.map(item => \n          <CollectionItem key={item.id} item={item} />\n          )}\n        </S.Items>\n    </S.Collection>\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  collection: selectCollection(ownProps.match.params.collectionId)(state),\n  isLoading: selectIsCollectionFetching(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Collection);"]},"metadata":{},"sourceType":"module"}