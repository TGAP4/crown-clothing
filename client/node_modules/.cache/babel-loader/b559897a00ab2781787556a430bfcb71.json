{"ast":null,"code":"import _slicedToArray from\"/Users/TGAP/Desktop/crown-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,lazy,Suspense}from'react';import{Route}from'react-router-dom';import{connect}from'react-redux';import{createStructuredSelector}from'reselect';import{fetchCollectionsStart as _fetchCollectionsStart}from'../../redux/shop/shop-actions';import{selectIsCollectionFetching}from'../../redux/shop/shop-selectors';import LoadingSpinner from'../../components/loading-spinner/loading-spinner';var CollectionsOverview=lazy(function(){return import('../collections-overview/collections-overview');});var Collection=lazy(function(){return import('../collection/collection');});var ShopPage=function ShopPage(_ref){var match=_ref.match,fetchCollectionsStart=_ref.fetchCollectionsStart,isLoading=_ref.isLoading;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),preLoading=_useState2[0],setPreLoading=_useState2[1];useEffect(function(){fetchCollectionsStart();setPreLoading(false);},[fetchCollectionsStart]);return/*#__PURE__*/React.createElement(React.Fragment,null,preLoading||isLoading?/*#__PURE__*/React.createElement(LoadingSpinner,null):/*#__PURE__*/React.createElement(Suspense,{fallback:/*#__PURE__*/React.createElement(LoadingSpinner,null)},/*#__PURE__*/React.createElement(Route,{exact:true,path:\"\".concat(match.path),component:CollectionsOverview}),/*#__PURE__*/React.createElement(Route,{path:\"\".concat(match.path,\"/:collectionId\"),component:Collection})));};var mapStateToProps=createStructuredSelector({isLoading:selectIsCollectionFetching});var mapDispatchToProps=function mapDispatchToProps(dispatch){return{fetchCollectionsStart:function fetchCollectionsStart(){return dispatch(_fetchCollectionsStart());}};};export default connect(mapStateToProps,mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/Users/TGAP/Desktop/crown-clothing/client/src/pages/shop/shop.jsx"],"names":["React","useState","useEffect","lazy","Suspense","Route","connect","createStructuredSelector","fetchCollectionsStart","selectIsCollectionFetching","LoadingSpinner","CollectionsOverview","Collection","ShopPage","match","isLoading","preLoading","setPreLoading","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"gKAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,CAAoCC,IAApC,CAA0CC,QAA1C,KAAyD,OAAzD,CACA,OAAQC,KAAR,KAAoB,kBAApB,CAEA,OAAQC,OAAR,KAAsB,aAAtB,CACA,OAAQC,wBAAR,KAAuC,UAAvC,CACA,OAAQC,qBAAqB,GAArBA,CAAAA,sBAAR,KAAoC,+BAApC,CACA,OAAQC,0BAAR,KAAyC,iCAAzC,CAEA,MAAOC,CAAAA,cAAP,KAA2B,kDAA3B,CAEA,GAAMC,CAAAA,mBAAmB,CAAGR,IAAI,CAAC,iBAAM,QAAO,8CAAP,CAAN,EAAD,CAAhC,CACA,GAAMS,CAAAA,UAAU,CAAGT,IAAI,CAAC,iBAAM,QAAO,0BAAP,CAAN,EAAD,CAAvB,CAGA,GAAMU,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAA+C,IAA7CC,CAAAA,KAA6C,MAA7CA,KAA6C,CAAtCN,qBAAsC,MAAtCA,qBAAsC,CAAfO,SAAe,MAAfA,SAAe,eAC1Bd,QAAQ,CAAC,IAAD,CADkB,wCACvDe,UADuD,eAC3CC,aAD2C,eAE9Df,SAAS,CAAC,UAAM,CACdM,qBAAqB,GACrBS,aAAa,CAAC,KAAD,CAAb,CACD,CAHQ,CAGN,CAACT,qBAAD,CAHM,CAAT,CAKA,mBACE,wCACGQ,UAAU,EAAID,SAAd,cACC,oBAAC,cAAD,MADD,cAEG,oBAAC,QAAD,EAAU,QAAQ,cAAE,oBAAC,cAAD,MAApB,eACA,oBAAC,KAAD,EACE,KAAK,KADP,CAEE,IAAI,WAAKD,KAAK,CAACI,IAAX,CAFN,CAGE,SAAS,CAAEP,mBAHb,EADA,cAMA,oBAAC,KAAD,EACE,IAAI,WAAKG,KAAK,CAACI,IAAX,kBADN,CAEE,SAAS,CAAEN,UAFb,EANA,CAHN,CADF,CAkBD,CAzBD,CA2BA,GAAMO,CAAAA,eAAe,CAAGZ,wBAAwB,CAAC,CAC/CQ,SAAS,CAAEN,0BADoC,CAAD,CAAhD,CAIA,GAAMW,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,QAAK,CACtCb,qBAAqB,CAAE,uCAAMa,CAAAA,QAAQ,CAACb,sBAAqB,EAAtB,CAAd,EADe,CAAL,EAAnC,CAIA,cAAeF,CAAAA,OAAO,CAACa,eAAD,CAAkBC,kBAAlB,CAAP,CAA6CP,QAA7C,CAAf","sourcesContent":["import React, {useState, useEffect, lazy, Suspense} from 'react';\nimport {Route} from 'react-router-dom';\n\nimport {connect} from 'react-redux';\nimport {createStructuredSelector} from 'reselect';\nimport {fetchCollectionsStart} from '../../redux/shop/shop-actions';\nimport {selectIsCollectionFetching} from '../../redux/shop/shop-selectors';\n\nimport LoadingSpinner from '../../components/loading-spinner/loading-spinner';\n\nconst CollectionsOverview = lazy(() => import('../collections-overview/collections-overview'));\nconst Collection = lazy(() => import('../collection/collection'));\n\n\nconst ShopPage = ({match, fetchCollectionsStart, isLoading}) => {\n  const [preLoading, setPreLoading] = useState(true);\n  useEffect(() => {\n    fetchCollectionsStart();\n    setPreLoading(false);\n  }, [fetchCollectionsStart]);\n\n  return (\n    <>\n      {preLoading || isLoading ?\n        <LoadingSpinner />\n        : <Suspense fallback={<LoadingSpinner />}>\n          <Route \n            exact \n            path={`${match.path}`} \n            component={CollectionsOverview}\n          />\n          <Route \n            path={`${match.path}/:collectionId`}\n            component={Collection}\n          />\n        </Suspense>\n      }\n    </>\n  )\n};\n\nconst mapStateToProps = createStructuredSelector({\n  isLoading: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}