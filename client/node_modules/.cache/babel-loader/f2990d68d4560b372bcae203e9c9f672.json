{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCZr0n2mkvrHqgqiItcJ_xCw8Eam7HxqmE\",\n  authDomain: \"crown-database-ed8fc.firebaseapp.com\",\n  databaseURL: \"https://crown-database-ed8fc.firebaseio.com\",\n  projectId: \"crown-database-ed8fc\",\n  storageBucket: \"crown-database-ed8fc.appspot.com\",\n  messagingSenderId: \"219617685266\",\n  appId: \"1:219617685266:web:46ddde6db938c882624dcb\",\n  measurementId: \"G-DG8HQG94M7\"\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const createUserProfileDocument = (userAuth, ...rest) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  userRef.get().then(snapShot => {\n    if (!snapShot.exists) {\n      const {\n        displayName,\n        email\n      } = userAuth;\n      const createdAt = new Date();\n      userRef.set({\n        displayName,\n        email,\n        createdAt,\n        rest\n      });\n    }\n  }).catch(err => console.log('Error creating user:', err));\n  return userRef;\n};\nexport const addCollectionAndDocs = (collectionKey, docsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  docsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n}); // export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;","map":{"version":3,"sources":["/Users/TGAP/Desktop/crown-clothing/src/firebase/firebase-utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","userAuth","createUserProfileDocument","rest","userRef","doc","uid","get","then","snapShot","exists","displayName","email","createdAt","Date","set","catch","err","console","log","addCollectionAndDocs","collectionKey","docsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","googleProvider","GoogleAuthProvider","setCustomParameters","prompt"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyCZr0n2mkvrHqgqiItcJ_xCw8Eam7HxqmE\",\n    authDomain: \"crown-database-ed8fc.firebaseapp.com\",\n    databaseURL: \"https://crown-database-ed8fc.firebaseio.com\",\n    projectId: \"crown-database-ed8fc\",\n    storageBucket: \"crown-database-ed8fc.appspot.com\",\n    messagingSenderId: \"219617685266\",\n    appId: \"1:219617685266:web:46ddde6db938c882624dcb\",\n    measurementId: \"G-DG8HQG94M7\"\n  };\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject)\n  })\n};\n\n\nexport const createUserProfileDocument = (userAuth, ...rest) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  userRef.get()\n  .then(snapShot => {\n    if (!snapShot.exists) {\n      const {displayName, email} = userAuth;\n      const createdAt = new Date();\n      userRef.set({displayName, email, createdAt, rest})\n    }\n  })\n  .catch(err => console.log('Error creating user:', err));\n  return userRef;\n}\n\n\nexport const addCollectionAndDocs = (collectionKey, docsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  docsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  })\n\n  batch.commit()\n}\n\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {title, items} = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  \n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {})\n}\n\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({prompt: 'select_account'});\n// export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}