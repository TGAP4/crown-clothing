{"ast":null,"code":"var _jsxFileName = \"/Users/TGAP/Desktop/Stuff/Projects/crown-clothing/client/src/components/sign-up/sign-up.jsx\";\nimport React, { useState } from 'react';\nimport * as S from './sign-up-styles';\nimport { connect } from 'react-redux';\nimport { signUpStart } from '../../redux/user/user-actions';\nimport FormInput from '../form-input/form-input';\nimport CustomButton from '../custom-button/custom-button';\n\nconst SignUp = ({\n  signUpStart\n}) => {\n  const [userCredentials, setUserCredentials] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    displayName: ''\n  });\n  const {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  } = userCredentials;\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (password !== confirmPassword) {\n      alert(\"Passwords do not match\");\n      return;\n    }\n\n    signUpStart(email, password, displayName);\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setUserCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(S.SignUp, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(S.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"I do not have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"Sign up with with email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    type: \"text\",\n    name: \"displayName\",\n    value: displayName,\n    handleChange: handleChange,\n    label: \"Display Name\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    type: \"email\",\n    name: \"email\",\n    value: email,\n    handleChange: handleChange,\n    label: \"Email\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    type: \"password\",\n    name: \"password\",\n    value: password,\n    handleChange: handleChange,\n    label: \"Password\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    type: \"password\",\n    name: \"confirmPassword\",\n    value: confirmPassword,\n    handleChange: handleChange,\n    label: \"Confirm Password\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"SIGN UP\")));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: (email, password, displayName) => dispatch(signUpStart({\n    email,\n    password,\n    displayName\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);","map":{"version":3,"sources":["/Users/TGAP/Desktop/Stuff/Projects/crown-clothing/client/src/components/sign-up/sign-up.jsx"],"names":["React","useState","S","connect","signUpStart","FormInput","CustomButton","SignUp","userCredentials","setUserCredentials","email","password","confirmPassword","displayName","handleSubmit","event","preventDefault","alert","handleChange","name","value","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport * as S from './sign-up-styles';\n\nimport {connect} from 'react-redux';\nimport {signUpStart} from '../../redux/user/user-actions';\n\nimport FormInput from '../form-input/form-input';\nimport CustomButton from '../custom-button/custom-button';\n\n\nconst SignUp = ({signUpStart}) => {\n  const [userCredentials, setUserCredentials] = useState({\n    email: '', \n    password: '', \n    confirmPassword: '', \n    displayName: ''\n  });\n  const {displayName, email, password, confirmPassword} = userCredentials;\n  \n\n  const handleSubmit = event => {\n    event.preventDefault();  \n    if (password !== confirmPassword) {\n      alert(\"Passwords do not match\");\n      return;\n    }\n    signUpStart(email, password, displayName);\n  }\n\n\n  const handleChange = event => {\n    const {name, value} = event.target;\n    setUserCredentials({...userCredentials, [name]: value});\n  }\n\n\n  return (\n    <S.SignUp>\n      <S.Title>I do not have an account</S.Title>\n      <span>Sign up with with email and password</span>\n      <form onSubmit={handleSubmit}>\n        <FormInput \n          type='text' \n          name='displayName' \n          value={displayName} \n          handleChange={handleChange} \n          label='Display Name' \n          required \n        />\n          <FormInput \n          type='email' \n          name='email' \n          value={email} \n          handleChange={handleChange} \n          label='Email' \n          required \n        />\n          <FormInput \n          type='password' \n          name='password' \n          value={password} \n          handleChange={handleChange} \n          label='Password' \n          required \n        />\n          <FormInput \n          type='password' \n          name='confirmPassword' \n          value={confirmPassword} \n          handleChange={handleChange} \n          label='Confirm Password' \n          required \n        />\n        <CustomButton type='submit' onClick={handleSubmit}>SIGN UP</CustomButton>\n      </form>\n    </S.SignUp>\n  );\n};\n\n\nconst mapDispatchToProps = dispatch => ({\n  signUpStart: (email, password, displayName) => \n    dispatch(signUpStart({email, password, displayName}))\n});\n\nexport default connect(null, mapDispatchToProps)(SignUp);"]},"metadata":{},"sourceType":"module"}