{"ast":null,"code":"import _defineProperty from\"/Users/TGAP/Desktop/crown-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/TGAP/Desktop/crown-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/TGAP/Desktop/crown-clothing/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import*as S from'./sign-in-styles';import{connect}from'react-redux';import{googleSignInStart as _googleSignInStart,emailSignInStart as _emailSignInStart}from'../../redux/user/user-actions';import FormInput from'../form-input/form-input';import CustomButton from'../custom-button/custom-button';var SignIn=function SignIn(_ref){var googleSignInStart=_ref.googleSignInStart,emailSignInStart=_ref.emailSignInStart;var _useState=useState({email:'',password:''}),_useState2=_slicedToArray(_useState,2),userCredentials=_useState2[0],setUserCredentials=_useState2[1];var email=userCredentials.email,password=userCredentials.password;var handleSubmit=function handleSubmit(event){event.preventDefault();emailSignInStart(email,password);};var handleChange=function handleChange(event){var _event$target=event.target,value=_event$target.value,name=_event$target.name;setUserCredentials(_objectSpread({},userCredentials,_defineProperty({},name,value)));};return/*#__PURE__*/React.createElement(S.SignIn,null,/*#__PURE__*/React.createElement(S.Title,null,\"I already have an account\"),/*#__PURE__*/React.createElement(\"span\",null,\"Sign in with your email and password\"),/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit},/*#__PURE__*/React.createElement(FormInput,{name:\"email\",type:\"email\",value:email,handleChange:handleChange,label:\"Email\",required:true}),/*#__PURE__*/React.createElement(FormInput,{name:\"password\",type:\"password\",value:password,handleChange:handleChange,label:\"Password\",required:true}),/*#__PURE__*/React.createElement(S.Buttons,null,/*#__PURE__*/React.createElement(CustomButton,{type:\"submit\",onClick:handleSubmit},\"Sign in\"),/*#__PURE__*/React.createElement(CustomButton,{type:\"button\",onClick:googleSignInStart,mod:\"googleSignIn\"},\"Sign in with Google\"))));};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{googleSignInStart:function googleSignInStart(){return dispatch(_googleSignInStart());},emailSignInStart:function emailSignInStart(email,password){return dispatch(_emailSignInStart({email:email,password:password}));}};};export default connect(null,mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/Users/TGAP/Desktop/crown-clothing/client/src/components/sign-in/sign-in.jsx"],"names":["React","useState","S","connect","googleSignInStart","emailSignInStart","FormInput","CustomButton","SignIn","email","password","userCredentials","setUserCredentials","handleSubmit","event","preventDefault","handleChange","target","value","name","mapDispatchToProps","dispatch"],"mappings":"ieAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,MAAO,GAAKC,CAAAA,CAAZ,KAAmB,kBAAnB,CAEA,OAAQC,OAAR,KAAsB,aAAtB,CACA,OAAQC,iBAAiB,GAAjBA,CAAAA,kBAAR,CAA2BC,gBAAgB,GAAhBA,CAAAA,iBAA3B,KAAkD,+BAAlD,CAEA,MAAOC,CAAAA,SAAP,KAAsB,0BAAtB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gCAAzB,CAGA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAA2C,IAAzCJ,CAAAA,iBAAyC,MAAzCA,iBAAyC,CAAtBC,gBAAsB,MAAtBA,gBAAsB,eACVJ,QAAQ,CAAC,CACrDQ,KAAK,CAAE,EAD8C,CAErDC,QAAQ,CAAE,EAF2C,CAAD,CADE,wCACjDC,eADiD,eAChCC,kBADgC,kBAKjDH,CAAAA,KALiD,CAK9BE,eAL8B,CAKjDF,KALiD,CAK1CC,QAL0C,CAK9BC,eAL8B,CAK1CD,QAL0C,CAOxD,GAAMG,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,CAC9BA,KAAK,CAACC,cAAN,GACAV,gBAAgB,CAACI,KAAD,CAAQC,QAAR,CAAhB,CACF,CAHA,CAMA,GAAMM,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAF,KAAK,CAAI,mBACNA,KAAK,CAACG,MADA,CACrBC,KADqB,eACrBA,KADqB,CACdC,IADc,eACdA,IADc,CAE5BP,kBAAkB,kBAAKD,eAAL,oBAAuBQ,IAAvB,CAA8BD,KAA9B,GAAlB,CACD,CAHD,CAKA,mBACE,oBAAC,CAAD,CAAG,MAAH,mBACE,oBAAC,CAAD,CAAG,KAAH,kCADF,cAEE,uEAFF,cAGE,4BAAM,QAAQ,CAAEL,YAAhB,eACE,oBAAC,SAAD,EACE,IAAI,CAAC,OADP,CAEE,IAAI,CAAC,OAFP,CAGE,KAAK,CAAEJ,KAHT,CAIE,YAAY,CAAEO,YAJhB,CAKE,KAAK,CAAC,OALR,CAME,QAAQ,KANV,EADF,cASE,oBAAC,SAAD,EACE,IAAI,CAAC,UADP,CAEE,IAAI,CAAC,UAFP,CAGE,KAAK,CAAEN,QAHT,CAIE,YAAY,CAAEM,YAJhB,CAKE,KAAK,CAAC,UALR,CAME,QAAQ,KANV,EATF,cAiBE,oBAAC,CAAD,CAAG,OAAH,mBACE,oBAAC,YAAD,EAAc,IAAI,CAAC,QAAnB,CAA4B,OAAO,CAAEH,YAArC,YADF,cAIE,oBAAC,YAAD,EAAc,IAAI,CAAC,QAAnB,CAA4B,OAAO,CAAET,iBAArC,CAAwD,GAAG,CAAC,cAA5D,wBAJF,CAjBF,CAHF,CADF,CAgCD,CAlDD,CAqDA,GAAMgB,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,QAAK,CACtCjB,iBAAiB,CAAE,mCAAMiB,CAAAA,QAAQ,CAACjB,kBAAiB,EAAlB,CAAd,EADmB,CAEtCC,gBAAgB,CAAE,0BAACI,KAAD,CAAQC,QAAR,QAChBW,CAAAA,QAAQ,CAAChB,iBAAgB,CAAC,CAACI,KAAK,CAALA,KAAD,CAAQC,QAAQ,CAARA,QAAR,CAAD,CAAjB,CADQ,EAFoB,CAAL,EAAnC,CAMA,cAAeP,CAAAA,OAAO,CAAC,IAAD,CAAOiB,kBAAP,CAAP,CAAkCZ,MAAlC,CAAf","sourcesContent":["import React, {useState} from 'react';\nimport * as S from './sign-in-styles';\n\nimport {connect} from 'react-redux';\nimport {googleSignInStart, emailSignInStart} from '../../redux/user/user-actions';\n\nimport FormInput from '../form-input/form-input';\nimport CustomButton from '../custom-button/custom-button';\n\n\nconst SignIn = ({googleSignInStart, emailSignInStart}) => {\n  const [userCredentials, setUserCredentials] = useState({\n    email: '', \n    password: ''\n  });\n  const {email, password} = userCredentials;\n\n  const\thandleSubmit = (event) => {\n    event.preventDefault();  \n    emailSignInStart(email, password);\n\t}\n\n\n  const\thandleChange = event => {\n    const {value, name} = event.target;\n    setUserCredentials({...userCredentials, [name]: value});\n  }\n\n  return (\n    <S.SignIn>\n      <S.Title>I already have an account</S.Title>\n      <span>Sign in with your email and password</span>\n      <form onSubmit={handleSubmit}>\n        <FormInput \n          name='email' \n          type='email' \n          value={email} \n          handleChange={handleChange} \n          label='Email'\n          required \n        />\n        <FormInput \n          name='password' \n          type='password' \n          value={password} \n          handleChange={handleChange} \n          label='Password'\n          required \n        />\n        <S.Buttons>\n          <CustomButton type='submit' onClick={handleSubmit}>\n            Sign in\n          </CustomButton>\n          <CustomButton type='button' onClick={googleSignInStart} mod='googleSignIn'>\n            Sign in with Google\n          </CustomButton>\n        </S.Buttons>\n      </form>\n    </S.SignIn>\n  )\n};\n\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => \n    dispatch(emailSignInStart({email, password}))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}