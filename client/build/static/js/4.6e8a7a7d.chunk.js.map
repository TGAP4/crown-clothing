{"version":3,"sources":["pages/shop/shop.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","redux/shop/shop-selectors.js"],"names":["CollectionsOverview","lazy","Collection","mapStateToProps","createStructuredSelector","isLoading","selectIsCollectionFetching","connect","dispatch","fetchCollectionsStart","match","useState","preLoading","setPreLoading","useEffect","fallback","exact","path","component","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","selectShop","state","shop","selectShopCollections","createSelector","collections","selectCollectionsForPreview","shopCollections","keys","map","key","selectCollection","collectionUrlParam","items","isFetching"],"mappings":"mMAUMA,EAAsBC,gBAAK,kBAAM,iCACjCC,EAAaD,gBAAK,kBAAM,iCA8BxBE,EAAkBC,YAAyB,CAC/CC,UAAWC,MAOEC,sBAAQJ,GAJI,SAAAK,GAAQ,MAAK,CACtCC,sBAAuB,kBAAMD,EAASC,mBAGzBF,EAnCE,SAAC,GAA+C,IAA9CG,EAA6C,EAA7CA,MAAOD,EAAsC,EAAtCA,sBAAuBJ,EAAe,EAAfA,UAAe,EAC1BM,oBAAS,GADiB,mBACvDC,EADuD,KAC3CC,EAD2C,KAO9D,OALAC,qBAAU,WACRL,IACAI,GAAc,KACb,CAACJ,IAGF,oCACGG,GAAcP,EACb,kBAAC,IAAD,MACE,kBAAC,WAAD,CAAUU,SAAU,kBAAC,IAAD,OACpB,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAI,UAAKP,EAAMO,MACfC,UAAWlB,IAEb,kBAAC,IAAD,CACEiB,KAAI,UAAKP,EAAMO,KAAX,kBACJC,UAAWhB,U,8EC7BR,SAASiB,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,gCILtG,kHAEMC,EAAa,SAAAC,GAAK,OAAIA,EAAMC,MAErBC,EAAwBC,YACnC,CAACJ,IACD,SAAAE,GAAI,OAAIA,EAAKG,eAGFC,EAA8BF,YACzC,CAACD,IACD,SAAAI,GAAe,OAAIvB,OAAOwB,KAAKD,GAC5BE,KAAI,SAAAC,GAAG,OAAIH,EAAgBG,SAGnBC,EAAmB,SAAAC,GAAkB,OAAIR,YACpD,CAACD,IACD,SAAAI,GAAe,OAAIA,EAAgBK,IAAuB,CAACC,MAAO,QAGvDjD,EAA6BwC,YACxC,CAACJ,IACD,SAAAE,GAAI,OAAIA,EAAKY","file":"static/js/4.6e8a7a7d.chunk.js","sourcesContent":["import React, {useState, useEffect, lazy, Suspense} from 'react';\nimport {Route} from 'react-router-dom';\n\nimport {connect} from 'react-redux';\nimport {createStructuredSelector} from 'reselect';\nimport {fetchCollectionsStart} from '../../redux/shop/shop-actions';\nimport {selectIsCollectionFetching} from '../../redux/shop/shop-selectors';\n\nimport LoadingSpinner from '../../components/loading-spinner/loading-spinner';\n\nconst CollectionsOverview = lazy(() => import('../collections-overview/collections-overview'));\nconst Collection = lazy(() => import('../collection/collection'));\n\n\nconst ShopPage = ({match, fetchCollectionsStart, isLoading}) => {\n  const [preLoading, setPreLoading] = useState(true);\n  useEffect(() => {\n    fetchCollectionsStart();\n    setPreLoading(false);\n  }, [fetchCollectionsStart]);\n\n  return (\n    <>\n      {preLoading || isLoading ?\n        <LoadingSpinner />\n        : <Suspense fallback={<LoadingSpinner />}>\n          <Route \n            exact \n            path={`${match.path}`} \n            component={CollectionsOverview}\n          />\n          <Route \n            path={`${match.path}/:collectionId`}\n            component={Collection}\n          />\n        </Suspense>\n      }\n    </>\n  )\n};\n\nconst mapStateToProps = createStructuredSelector({\n  isLoading: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {createSelector} from 'reselect';\n\nconst selectShop = state => state.shop;\n\nexport const selectShopCollections = createSelector(\n  [selectShop],\n  shop => shop.collections\n);\n\nexport const selectCollectionsForPreview = createSelector(\n  [selectShopCollections],\n  shopCollections => Object.keys(shopCollections)\n    .map(key => shopCollections[key])\n);\n\nexport const selectCollection = collectionUrlParam => createSelector(\n  [selectShopCollections],\n  shopCollections => shopCollections[collectionUrlParam] || {items: []}\n);\n\nexport const selectIsCollectionFetching = createSelector(\n  [selectShop],\n  shop => shop.isFetching\n);"],"sourceRoot":""}